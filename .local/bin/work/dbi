#!/usr/bin/bash

if ! type "arthur" > /dev/null; then
    echo "Command 'arthur' not found"
    exit 1
fi

if ! type "psql" > /dev/null; then
    echo "Command 'psql' not found"
    exit 1
fi

if ! type "nmcli" > /dev/null; then
    echo "Command 'nmcli' not found"
    exit 1
fi

function help() {
    cat <<EOF
dbi SERVICE ENVIRONMENT [OPTION]

Examples:
  dbi george staging
  dbi george stag
  dbi . stag

Option:
  --url
      Print postgres connection url.
      URL is valid for 15 min, but once connected your session is valid until you disconnect.
      Example output 'postgres://user:pass@host:port/db'
  --readwrite | --rw
      Connect to the database with read and write access.
  --root
      Connect to database as root user. Required for some operations.
EOF
}

if [[ "$1" == "local" ]]; then
    echo "Connecting to localhost server"
    psql postgres://postgres:postgres@localhost:5432
    exit
fi

SERVICE=$1
ENVIRONMENT=$2
COMMAND=${3:-}

[[ "$SERVICE" == "" ]] && help && exit 1
[[ "$ENVIRONMENT" == "" ]] && help && exit 1

case $ENVIRONMENT in
    "stag")
        ENVIRONMENT="staging"
        ;;
    "sand")
        ENVIRONMENT="sandbox"
        ;;
    "prod")
        ENVIRONMENT="production"
        ;;
esac

case $ENVIRONMENT in
    "staging")
        ;;
    "sandbox")
        ;;
    "production")
        ;;
    *)
        echo "Invalid [ENVIRONMENT], must be either 'staging', 'sandbox' or 'production'"
        exit 1
esac

# Attempt to use service name from current working dir
if [[ "$SERVICE" == "." ]]; then
    SERVICE=$(git config --get remote.origin.url | grep -o '\/.*\.' | tr -d '/.')
    if [[ "$SERVICE" == "" ]]; then
        echo "Failed to parse service name from cwd"
        exit 1
    fi
fi


if ! certcheck ~/.cert/nm-openvpn/zimpler-cert.pem > /dev/null; then
    echo "Zimpler VPN cert out of date, updating..."
    arthur vpn-config update-networkmanager
fi

CONNECTED_TO_VPN=$(nmcli -t connection show --active | grep zimpler)
if [[ "$CONNECTED_TO_VPN" == "" ]]; then
    nmcli connection up zimpler > /dev/null
    if [[ "$(nmcli -t connection show --active | grep zimpler)" == "" ]]; then
        echo "Could not connect to zimpler vpn"
        exit 1
    fi
fi

case $COMMAND in
    "")
        if ! arthur psql "$SERVICE-$ENVIRONMENT"; then
            echo "Failed to login with normal database name, trying with legacy name"
            if ! arthur psql "$SERVICE-$ENVIRONMENT-db"; then
                echo "Invalid or unsupported [SERVICE]"
                exit 1
            fi
        fi
        exit
        ;;
    "--url")
        URL=$(arthur db-connection-url "$SERVICE-$ENVIRONMENT")
        echo "$URL"
        exit
        ;;
    "--rw")
        ;&
    "--readwrite")
        arthur psql "$SERVICE-$ENVIRONMENT" --readwrite || echo "Invalid or unspported [SERVICE]" && exit 1
        ;;
    "--root")
        arthur psql "$SERVICE-$ENVIRONMENT" --root || echo "Invalid or unspported [SERVICE]" && exit 1
        exit
        ;;
    *)
        help
        exit 1
esac
