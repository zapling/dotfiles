#!/usr/bin/zsh

SERVICE=$1
ENVIRONMENT=$2
COMMAND=${3:-}

if ! type "arthur" > /dev/null; then
    echo "Command 'arthur' not found"
    exit 1
fi

if ! type "psql" > /dev/null; then
    echo "Command 'psql' not found"
    exit 1
fi

function help() {
    echo "dbi [SERVICE] [ENVIRONMENT] [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  --parse (default)"
    echo "      Connect to database by parsing enviroment variables from arthur."
    echo "      Fastest method but success depends on the enviroment variable setup, some services might not work."
    echo "  --arthur"
    echo "      Connect to database via arthur psql. This method is generally slower but supports all services."
    echo "  --url"
    echo "      Print database connection url 'postgres://user:pass@host:port/db?sslmode=disable'"
}

[[ "$SERVICE" == "" ]] && help && exit 1
[[ "$ENVIRONMENT" == "" ]] && help && exit 1

case $ENVIRONMENT in
    "staging")
        ;;
    "sandbox")
        ;;
    "production")
        ;;
    *)
        echo "Invalid [ENVIRONMENT], most be either 'staging', 'sandbox' or 'production'"
        exit 1
esac

function getDatabaseUrl() {
    # TODO: If arthur version is outdated this command fails!
    RAW_DATA=$(arthur param read $SERVICE $ENVIRONMENT)
    if [[ -z $RAW_DATA ]]; then
        echo ""
    else
        # Try and connect via database url, as this is the easiest method
        DB_URL=$(echo $RAW_DATA | grep -o "DB_URL.*\|DATABASE_URL.*" | sed 's/^[^=]*=//' | tr -d '"')
        [[ ! -z $DB_URL ]] && echo $DB_URL && return


        # Try and find each database variable, with defaults as fallback
        DB_VARS=($(echo $RAW_DATA | grep -o "DB_.*\|DATABASE_.*\|POSTGRES_.*"))

        # Fallbacks
        host=
        port=5432
        user=
        pass=
        db="$(echo "$SERVICE" | tr '-' '_')_$ENVIRONMENT"

        for var in "${DB_VARS[@]}"
        do
            key_value=($(echo "$var" | tr '=' '\n'))
            key=${key_value[1]}
            value=$(echo "${key_value[2]}" | tr -d '"')

            [[ $key =~ "HOST" ]] && host=$value
            [[ $key =~ "PORT" ]] && port=$value
            [[ $key =~ "USER" ]] && user=$value
            [[ $key =~ "PASS" ]] && pass=$value
            [[ $key =~ "NAME" ]] && db=$value
        done

        values=($host $port $user $pass $db)

        [[ ${#values} -ne 5 ]] && echo "" && return

        echo "postgres://$user:$pass@$host:$port/$db?sslmode=disable"
    fi
}


case $COMMAND in
    "")
        ;&
    "--parse")
        URL=$(getDatabaseUrl)
        [[ -z $URL ]] && echo "Invalid or unsupported [SERVICE]" && exit 1
        psql $URL
        exit
        ;;
    "--arthur")
        arthur psql $SERVICE-$ENVIRONMENT || echo "Invalid or unspported [SERVICE]" && exit 1
        exit
        ;;
    "--url")
        URL=$(getDatabaseUrl)
        echo $URL
        exit
        ;;
    *)
        echo "Invalid [COMMAND], supported values are '--url', '--arthur' or empty."
        exit
esac
