#!/usr/bin/python3
import re
import urllib.request
import json
import datetime
import pathlib
import subprocess
import xml.etree.ElementTree as ET

filename    = 'weather.xml'
config_path = '/.config/weather-yr.no/'
cache_path  = '/.local/share/weather-yr.no/'

def getConfigPath():
    path = str(pathlib.Path.home()) + config_path
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)
    return path

def getFilePath():
    path = str(pathlib.Path.home()) + cache_path
    pathlib.Path(path).mkdir(parents=True, exist_ok=True)
    return path

def getLoadedConfig():
    path = getConfigPath() + 'config.json'
    return json.load(open(path))

def getForecastByWifiName(config):
    for name in config:
        cmd = "nmcli connection show --active | grep " + name
        try:
            subprocess.check_output(cmd, shell=True)
            return getForecast(config[name])
        except subprocess.CalledProcessError:
            pass
    return None

# Download the latest forecast from yr and append 'CacheUntil' attribute.
def getLatestForecast(place = ''):
    place_encoded = urllib.parse.quote(place)
    url = 'https://www.yr.no/place/' + place_encoded + '/forecast.xml'
    with urllib.request.urlopen(url) as f:
        xml = f.read().decode('utf-8')
    cache_until = datetime.datetime.now() + datetime.timedelta(hours=1)
    tree = ET.fromstring(xml)
    tree.set('CacheUntil', cache_until.strftime("%Y-%m-%d %H:%M:%S"))
    tree.set('Place', place)
    data = ET.tostring(tree)
    with open(getFilePath() + filename, "w") as f:
        f.write(data.decode("utf-8"))

# Load a forecast from file
def getForecastDataFromXMLFile(filename):
    tree = ET.parse(filename)
    root = tree.getroot()
    forecasts = root.find('forecast')
    forecast = forecasts.find('tabular')[0]

    data = {}
    for child in forecast:
        data[child.tag] = child.attrib
    return data

# Get the current forecast, loading from cache and downloading a new one
# if cache is invalid.
def getForecast(place = ''):
    f = pathlib.Path(getFilePath() + filename)
    if f.is_file() is False:
        getLatestForecast(place)
    else:
        tree = ET.parse(getFilePath() + filename)
        root = tree.getroot()
        cache_until = datetime.datetime.strptime(root.attrib['CacheUntil'], '%Y-%m-%d %H:%M:%S')
        file_place = root.attrib['Place']
        is_cache_expired = cache_until < datetime.datetime.now()

        if file_place != place or is_cache_expired is True:
            getLatestForecast(place)

    data = getForecastDataFromXMLFile(getFilePath() + filename)
    return data

# Get the corresponding weather emoji
def getWeatherEmoji(number):
    # https://github.com/nrkno/yr-weather-symbols
    mapping = {
            '01': '☀️',  # clear sky
            '02': '🌤️',  # fair
            '03': '⛅',  # partly cloudy
            '04': '☁️',  # cloudy

            '40': '🌧️',  # light rain showers
            '05': '🌧️',  # rain showers
            '41': '🌧️',  # heavy rain showers

            '24': '⛈️',  # light rain showers and thunder
            '06': '⛈️',  # rain showers and thunder
            '25': '⛈️',  # heavy rain showers and thunder

            '42': '🌧️',  # light sleet showers
            '07': '️🌧️',  # sleet showers
            '43': '🌧️',  # heavy sleet showers
            '26': '️⛈️',  # light sleet showers and thunder
            '20': '⛈️',  # sleet showers and thunder
            '27': '⛈️',  # heavy sleet showers and thunder

            '44': '🌨️',  # light snow showers
            '08': '🌨️',  # snow showers
            '45': '🌨️',  # heavy snow showers
            '28': '⛈️',  # light snow showers and thunder
            '21': '⛈️',  # snow showers and thunder
            '29': '⛈️',  # heavy snow showers and thunder

            '46': '🌧️',  # light rain
            '09': '🌧️',  # rain
            '10': '🌧️',  # heavy rain
            '30': '⛈️',  # light rain and thunder
            '22': '⛈️',  # rain and thunder
            '11': '⛈️',  # heavy rain and thunder

            '47': '🌧️',  # light sleet
            '48': '🌧️',  # sleet
            '48': '🌧️',  # heavy sleet
            '31': '⛈️',  # light sleet and thunder
            '23': '⛈️',  # sleet and thunder
            '32': '⛈️',  # heavy sleet and thunder

            '49': '🌨️',  # light snow
            '13': '🌨️',  # snow
            '50': '🌨️',  # heavy snow
            '33': '⛈️',  # light snow and thunder
            '14': '⛈️',  # snow and thunder
            '34': '⛈️',  # heavy snow and thunder

            '15': '🌫️',  # fog

    }

    last_char = number[len(number) - 1]
    if re.search('[a-zA-Z]', last_char) is None:
        return mapping.get(number)
    else:
        return mapping.get(number[:len(number) - 1])

if __name__ == "__main__":
    config = getLoadedConfig()
    data = getForecastByWifiName(config)
    if data is not None:
        emoji = getWeatherEmoji(data['symbol']['var'])
        print("{0}°C {1}".format(data['temperature']['value'], emoji))
