#!/usr/bin/python3
import sys
import http.server
import urllib.request
import urllib.parse
import json
import pathlib

# Globals
REDIRECT_URI = 'http://localhost:8080/'
CLIENT_ID = ""
SECRET = ""

class RequestHandler(http.server.BaseHTTPRequestHandler):

    def do_GET(self):
        params = self._getURLParams()

        # Check that we got code param
        if len(params['code']) != 1:
            self.send_respose(400)
            self.end_headers()
            self.wfile.write(b'Missing code param')
            return

        auth = self._getTokens(params['code'][0])

        Spotify.saveTokens(auth['access_token'], auth['refresh_token'])

        self.wfile.write("Setup complete!".encode())

    def _getURLParams(self):
        parsed_url = urllib.parse.urlparse(self.path)
        return urllib.parse.parse_qs(parsed_url.query)

    def _getTokens(self, code):
        global REDIRECT_URI
        global CLIENT_ID
        global SECRET

        data = {
            'grant_type': 'authorization_code',
            'code': code,
            'redirect_uri': REDIRECT_URI,
            'client_id': CLIENT_ID,
            'client_secret': SECRET
        }
        body = urllib.parse.urlencode(data).encode()

        request = urllib.request.Request(
            url='https://accounts.spotify.com/api/token',
            data=body,
            headers={
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        )

        try:
            return json.loads(urllib.request.urlopen(request).read())

        except urllib.error.HTTPError as e:
            print(e.read())


class Spotify(object):
    CONFIG_PATH = '/.config/spotify-current-song'

    @classmethod
    def getCurrentSong(cls):
        auth = cls.getTokens()

        request = urllib.request.Request(
            url='https://api.spotify.com/v1/me/player/currently-playing',
            headers={
                'Authorization': 'Bearer ' + auth[0]
            }
        )
        try:
            response = json.loads(urllib.request.urlopen(request).read())
        except urllib.error.HTTPError as e:
            if (e.code == 401): # token expired
                cls.requestNewToken()
                return cls.getCurrentSong() # try again

        if (response['is_playing'] is False):
            return

        item = response['item']

        return "{} - {}".format(item['name'], item['artists'][0]['name'])

    @classmethod
    def requestNewToken(cls):
        auth = cls.getTokens()
        app = cls.getAppInfo()

        data = {
            'grant_type': 'refresh_token',
            'refresh_token': auth[1],
            'client_id': app[0],
            'client_secret': app[1]
        }
        body = urllib.parse.urlencode(data).encode()

        request = urllib.request.Request(
            url='https://accounts.spotify.com/api/token',
            data=body,
            headers={
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        )

        try:
            response = json.loads(urllib.request.urlopen(request).read())
            cls.saveTokens(response['access_token'], auth[1])

        except urllib.error.HTTPError as e:
            print(e.read())

    @classmethod
    def getTokens(cls):
        path = str(pathlib.Path.home()) + cls.CONFIG_PATH

        f = open(path + '/tokens', 'r')
        lines = f.readlines()

        return (lines[0].strip('\n'), lines[1].strip('\n'))

    @classmethod
    def saveTokens(cls, token, refresh):
        path = str(pathlib.Path.home()) + cls.CONFIG_PATH
        # Create config dir if needed
        pathlib.Path(path).mkdir(parents=True, exist_ok=True)

        f = open(path + '/tokens', 'w')
        with f as out:
            out.write("{}\n{}".format(token, refresh))

    @classmethod
    def getAppInfo(cls):
        path = str(pathlib.Path.home()) + cls.CONFIG_PATH

        f = open(path + '/app', 'r')
        lines = f.readlines()

        return (lines[0].strip('\n'), lines[1].strip('\n'))

    @classmethod
    def saveAppInfo(cls, client_id, secret):
        path = str(pathlib.Path.home()) + cls.CONFIG_PATH
        pathlib.Path(path).mkdir(parents=True, exist_ok=True)

        f = open(path + '/app', 'w')
        with f as out:
            out.write("{}\n{}".format(client_id, secret))


    @classmethod
    def setupOAUTH(cls, client_id, secret):
        global CLIENT_ID
        global SECRET

        CLIENT_ID = client_id
        SECRET = secret

        cls.saveAppInfo(client_id, secret)

        handler = RequestHandler
        server  = http.server.HTTPServer(('', 8080), handler)

        # Print URL
        print(
            "https://accounts.spotify.com/authorize" +
            "?client_id={}".format(CLIENT_ID) +
            "&response_type=code" +
            "&redirect_uri={}".format(REDIRECT_URI) +
            "&scope=user-read-currently-playing"
        )

        try:
            server.serve_forever()
        except:
            sys.exit(0)

if __name__ == "__main__":
    if (len(sys.argv) > 1 and sys.argv[1] == '--setup'):
        Spotify.setupOAUTH(sys.argv[2], sys.argv[3])
        sys.exit(0)

    if (len(sys.argv) > 1 and sys.argv[1] == '--refresh'):
        Spotify.requestNewToken()
        sys.exit(0)

    song = Spotify.getCurrentSong()
    print(song)
